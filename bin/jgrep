#!/usr/bin/env ruby

require 'jgrep'
require 'optparse'

options = {:flat => false, :start => nil, :field => [], :slice => nil}

begin
    OptionParser.new do |opts|
        opts.banner = "Usage: jgrep [options] \"expression\""
        opts.on("-s", "--simple [FIELDS]", "Display only one or more fields from each of the resulting json documents") do |field|
            options[:field].concat(field.split(" "))
        end

        opts.on("-c", "--compact", "Display non pretty json") do
            options[:flat] = true
        end

        opts.on("-f", "--flatten", "Makes output as flat as possible") do
            JGrep::flatten_on
        end

        opts.on("-i", "--input [FILENAME]", "Specify input file to parse") do |filename|
            options[:file] = filename
        end

        opts.on("-q", "--quiet", "Quiet; don't write to stdout.  Exit with zero status if match found.") do
            options[:quiet] = true
        end

        opts.on("-v", "--verbose", "Verbose output") do
            JGrep::verbose_on
        end

        opts.on("--start [FIELD]", "Where in the data to start from") do |field|
            options[:start] = field
        end

        opts.on("--slice RANGE", "A range of the form 'n' or 'n..m', indicating which documents to extract from the final output") do |field|
            range_nums = field.split('..').map{ |x| x.to_i }
            options[:slice] = range_nums.length == 1 ? range_nums[0] : Range.new(*range_nums)
        end
    end.parse!
rescue OptionParser::InvalidOption => e
    puts e.to_s.capitalize
    exit 1
end

begin
    expression = nil

    #Identify the expression from command line arguments
    ARGV.each do |argument|
        if argument =~ /<|>|=|\+|-/
            expression = argument
            ARGV.delete(argument)
        end
    end

    expression = "" if expression.nil?

    #Load json from standard input if tty is false
    #else find and load file from command line arugments
    if options[:file]
        json = File.read(options[:file])
    elsif ! STDIN.tty?
        json = STDIN.read
    else
        raise "No json input specified"
    end

    if options[:field].empty?
        fields = nil
    elsif options[:field].size > 1
        fields = options[:field]
    else
        fields = options[:field][0]
    end

    result = JGrep::jgrep((json), expression, fields, options[:start])

    result = result.slice(options[:slice]) if options[:slice]

    if result.nil? || result.empty?
        exit 1
    elsif ! options[:quiet] 
        if ! fields 
          if result.is_a?(Array) || result.is_a?(Hash)
            final_result = options[:flat] ? result.to_json : JSON.pretty_generate(result)
          else
            final_result = result
          end
        elsif result.is_a?(Array) && ! (result.first.is_a?(Hash) || result.flatten.first.is_a?(Hash))
          final_result = result.select{ |x| ! x.nil? }.join("\n")
        else
          final_result = JSON.pretty_generate(result)
        end
        puts(final_result)
    end
rescue Exception => e
    if e.is_a?(SystemExit)
        exit e.status
    else
        raise e
        STDERR.puts "Error - #{e}"
        exit 1
    end
end
